extends threejslayout

block content
    style.
        html, body {
            height: 100%;
        }
    script(src="/threejs/static/lib/threejs/tween.min.js")
    script(src="/threejs/static/lib/threejs/TrackballControls.js")
    script(src="/threejs/static/lib/threejs/CSS3DRenderer.js")
    script(src="/threejs/static/lib/threejs/SceneLoader.js")
    script(src="/threejs/static/lib/threejs/FlyControls.js")

    #container

    script.
        if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
        var container, stats, clock, mixer;
        var camera, scene, renderer, objects;
        var clock = new THREE.Clock();

        init();
        animate();
        function init() {
            container = document.getElementById( 'container' );
            camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 2000 );
            camera.position.set( 300, 50, 300 );
            clock = new THREE.Clock();
            scene = new THREE.Scene();

            controls = new THREE.FlyControls( camera );
            controls.movementSpeed = 250;
            controls.domElement = container;
            controls.rollSpeed = Math.PI / 6;
            controls.autoForward = false;
            controls.dragToLook = true;

            //- scene.fog = new THREE.FogExp2( 0x000000, 0.035 );
            //- mixer = new THREE.AnimationMixer( scene );
            //- var loader = new THREE.JSONLoader();
            var loader = new THREE.SceneLoader();
            //- var loader = new THREE.ObjectLoader();
            loader.load('/threejs/static/file/xia/obj.js', function( obj ) {
                console.log('JSONLoader:', arguments);
            //- loader.load( 'models/animated/monster/monster.js', function ( geometry, materials ) {
                // adjust color a bit
                //- var material = materials[ 0 ];
                //- material.morphTargets = true;
                //- material.color.setHex( 0xffaaaa );
                //- for ( var i = 0; i < 729; i ++ ) {
                //-     mesh = new THREE.Mesh( geometry, materials );
                //-     // random placement in a grid
                //-     var x = ( ( i % 27 )  - 13.5 ) * 2 + THREE.Math.randFloatSpread( 1 );
                //-     var z = ( Math.floor( i / 27 ) - 13.5 ) * 2 + THREE.Math.randFloatSpread( 1 );
                //-     mesh.position.set( x, 0, z );
                //-     var s = THREE.Math.randFloat( 0.00075, 0.001 );
                //-     mesh.scale.set( s, s, s );
                //-     mesh.rotation.y = THREE.Math.randFloat( -0.25, 0.25 );
                //-     mesh.matrixAutoUpdate = false;
                //-     mesh.updateMatrix();
                //-     scene.add( mesh );
                //-     mixer.clipAction( geometry.animations[ 0 ], mesh )
                //-             .setDuration( 1 )           // one second
                //-             .startAt( - Math.random() ) // random phase (already running)
                //-             .play();                    // let's go
                //- }

                for (var i in obj.objects) {
                    var tmp = obj.objects[i];
                    //- tmp.rotation.x = Math.PI / 3;
                    //- tmp.rotation.y = Math.PI / 2;
                    //- tmp.rotation.z = Math.PI / 2;
                    //- tmp.scale.set(.3, .3, .3);
                    scene.add(obj.objects[i])
                    }

                
            } );

            //- 立方体
            //- geometry = new THREE.BoxGeometry( 10, 10, 10 );
            //- material = new THREE.MeshLambertMaterial( { color: 0xffff00 } );
            //- cube = new THREE.Mesh( geometry, material );
            //- scene.add( cube );

            // lights
            var ambientLight = new THREE.AmbientLight( 0xffffff );
            scene.add( ambientLight );
            var pointLight = new THREE.PointLight( 0xfefefe);
            pointLight.position.set( 50, 50, 100 );
            scene.add( pointLight );
            // renderer
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            renderer.setClearColor( 0xffffff );
            container.appendChild( renderer.domElement );
            // stats
            stats = new Stats();
            container.appendChild( stats.dom );
            // events
            window.addEventListener( 'resize', onWindowResize, false );
        }
        //
        function onWindowResize( event ) {
            renderer.setSize( window.innerWidth, window.innerHeight );
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
        }
        //
        function animate() {
            requestAnimationFrame( animate );
            render();
            stats.update();
        }
        function render() {
            var delta = clock.getDelta();
            controls.update( delta );
            //- var timer = Date.now() * 0.0005;
            //- camera.position.x = Math.cos( timer ) * 300;
            //- camera.position.y = 4;
            //- camera.position.z = Math.sin( timer ) * 300;
            //- mixer.update( clock.getDelta() );
            //- camera.lookAt( scene.position );
            renderer.render( scene, camera );
        }