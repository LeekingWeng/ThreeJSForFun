extends threejslayout
block content
    style.
        body,html {
            padding: 0;
            margin: 0;
            width: 100%;
            height: 100%;
        }
        body {
            background-color: #9287cf;
        }
        #bubbles,
        #bubbles2,
        #bubbles3 {
            position: absolute;
            left: 0;
            top: 0;
        }

    canvas#bubbles
    canvas#bubbles2
    canvas#bubbles3

    script(src="/threejs/static/lib/threejs2/controls/OrbitControls.js")
    script(src="/threejs/static/lib/threejs2/GLTFLoader.js")

    script.
        ;(function(window) {
            function debounce(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this,
                        args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                }
            }

            var winsize = {
                width: window.innerWidth,
                height: window.innerHeight
            };

            var Bubbles = function(opt) {
                this.canvas = document.getElementById(opt.canvasID);
                this.ctx = this.canvas.getContext('2d');
                this.canvas.width = winsize.width;
                this.canvas.height = winsize.height;
                this.sourcex = opt.sourcex ? opt.sourcex : this.sourcex;
                this.sourcey = opt.sourcey ? opt.sourcey : this.sourcey;
                this.cntr = 0;
                this.circleArr = [];
                this.requestTd = undefined;

                var self = this;
                this.debounceResize = debounce(function() {
                    winsize = {
                        width: window.innerWidth,
                        height: window.innerHeight
                    };
                    self.canvas.height = winsize.height;
                    self.canvas.width = winsize.width;
                }, 10);

                window.addEventListener('resize', this.debounceResize);
            }
            Bubbles.prototype = {
                loop: function() {
                    //- this.requestTd = requestAnimationFrame(Bubbles.loop.bind(this));
                    this.requestTd = requestAnimationFrame(this.loop.bind(this));

                    this.update();
                    this.render();
                },
                update: function() {
                    if (this.cntr++ % 5 === 0) {
                        this.createCircle();
                    }
                    for (var circle in this.circleArr) {
                        circle = this.circleArr[circle];
                        circle.x = circle.startx + Math.cos(-circle.y / 80) * circle.swing;
                        circle.y -= circle.sy;
                        circle.s *= 1.0001;
                    }

                    while (this.circleArr.length > 2 &&
                        (this.circleArr[0].x + this.circleArr[0].s > winsize.width ||
                        this.circleArr[0].x + this.circleArr[0].s < 0 ||
                        this.circleArr[0].y + this.circleArr[0].s > winsize.height ||
                        this.circleArr[0].y + this.circleArr[0].s < 0)) {
                        this.circleArr.shift();
                        }
                },
                render: function() {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

                    for (var circle in this.circleArr) {
                        var current = this.circleArr[circle];
                        this.drawCircle(current.x, current.y, current.s);
                    }
                },
                createCircle: function() {
                    this.circleArr[this.circleArr.length] = {
                        x: this.sourcex,
                        y: this.sourcey,
                        sx: Math.random() * 4 - 2,
                        sy: Math.random() * 2 + 1,
                        startx: this.sourcex,
                        swing: Math.random() * 80 - 40,
                        s: Math.random() * winsize.height / 100
                    };
                },
                drawCircle: function(x, y, radius) {
                    this.ctx.fillStyle = 'rgba(255, 255, 255, .5)';
                    this.ctx.beginPath();
                    this.ctx.arc(x, y, radius, 0, Math.PI * 2, false);
                    this.ctx.fill();
                },
                start: function() {
                    if (!this.requestTd) {
                        //- document.onmousemove = this.getMouseCoordinates.bind(this);
                        this.loop();    
                    }
                },
                stop: function() {
                    if (this.requestTd) {
                        window.cancelAnimationFrame(this.requestTd);
                        this.requestId = undefined;
                        document.onmousemove = null;
                        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    }
                },
                getMouseCoordinates: function(ev) {
                    var ev = ev || window.event;
                    this.mousex = ev.pageX;
                    this.mousey = ev.pageY;
                }
            }

            var bubble1 = new Bubbles({
                canvasID: 'bubbles',
                sourcex: winsize.width / 3,
                sourcey: winsize.height - 30
            })
            var bubble2 = new Bubbles({
                canvasID: 'bubbles2',
                sourcex: winsize.width -30,
                sourcey: winsize.height / 2
            })
            var bubble3 = new Bubbles({
                canvasID: 'bubbles3',
                sourcex: 30,
                sourcey: winsize.height / 3
            })

            bubble1.start();
            bubble2.start();
            bubble3.start();
        }(window))


    script.

        var scene,
            camera,
            renderer,
            stats,
            gui
            ;
        var geometry,
            material,
            cube,
            line;
        
        var ambientLight;
        var loader;
        var tdObject;
        var mixer;
        var clock = new THREE.Clock();

        window.tdObject = tdObject;
        init();
        //- buildGui();
        animate();

        function init() {
            var size = 500,
                step = 50,
                geometry,
                i, j
                ;
            
            //- Stats 
            stats = new Stats();
            document.body.appendChild(stats.dom);

            //- 创建场景
            scene = new THREE.Scene();
        
            //- 创建相机
            camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000000 );
            camera.position.z = 500;
            camera.position.y = 500;
            camera.position.x = 100;
            camera.lookAt(scene.position);

            //- 渲染
            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor( 0xf0f0f0 );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            renderer.className = 'webglCanvas';
            document.body.appendChild( renderer.domElement );

            //- 平面坐標系
            var CoSystem = new THREEex.CoSystem(500, 50, 0x000000);
            line = CoSystem.create();
            scene.add(line);

            //- 地面
            var groundMaterial = new THREE.MeshPhongMaterial({
                    color: 0x333333,
                    side: THREE.FrontSide,
                    shading: THREE.SmoothShading
                });
            var ground = new THREE.Mesh( new THREE.PlaneBufferGeometry(5120, 5120), groundMaterial);
            ground.receiveShadow = true;
            ground.position.y = -200;
            ground.rotation.x = -Math.PI / 2;
            scene.add(ground);

            //- 立方体
            //- geometry = new THREE.BoxGeometry( 100, 100, 100 );
            //- material = new THREE.MeshLambertMaterial( { color: 0xff7700} );
            //- cube = new THREE.Mesh( geometry, material );
            //- scene.add( cube );

            //- gltf 3d模型导入
            loader = new THREE.GLTFLoader();
            loader.setCrossOrigin('https://ossgw.alicdn.com');
            var shanurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/51ff6704e19375613c3d4d3563348b7f.gltf';
            var caourl = 'https://ossgw.alicdn.com/tmall-c3/tmx/5e6c2c4bb052ef7562b52654c5635127.gltf'
            var bburl = 'https://ossgw.alicdn.com/tmall-c3/tmx/7554d11d494d79413fc665e9ef140aa6.gltf'
            var cowurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/2f17ddef947a7b6c702af69ff0e5b95f.gltf'
            var doorurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/203247ec660952407695fdfaf45812af.gltf';
            var fishurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/03807648cf70d99a7c1d3d634a2d4ea3.gltf';
            var demourl = 'https://ossgw.alicdn.com/tmall-c3/tmx/25ed65d4e9684567962230671512f731.gltf'
            var lanurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/1e1dfc4da8dfe2d7f14f23f0996c7feb.gltf'
            var daiurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/e68183de37ea4bed1787f6051b1d1f94.gltf'
            var douurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/0ca2926cbf4bc664ff00b03c1a5d1f66.gltf'
            loader.load(fishurl, function(data) {
                var scalePoint = 1;
                var animation;

                gltf = data;
                tdObject = gltf.scene;
                tdObject.position.set(0, 300, 0);                
                tdObject.scale.set(scalePoint, scalePoint, scalePoint);
                
                var animations = gltf.animations;
                if (animations && animations.length) {
                    mixer = new THREE.AnimationMixer(tdObject);
                    for (var i = 0; i < animations.length; i++) {
                        var animation = animations[i];
                        mixer.clipAction(animation).play();    
                    }    
                }

                scene.add( tdObject );
            })

            //- 环境灯
            ambientLight = new THREE.AmbientLight(0xffffff);
            scene.add(ambientLight);

            //- 直射灯
            //- var directionalLight = new THREE.DirectionalLight( 0xdddddd );
            //- directionalLight.position.set( 0, 0, 1 ).normalize();
            //- scene.add( directionalLight );

            //- 点灯
            //- var light = new THREE.PointLight(0xFFFFFF);
            //- light.position.set(50000, 50000, 50000);
            //- scene.add(light);

            //- 绑定窗口大小，自适应
            var threeexResize = new THREEex.WindowResize(renderer, camera);

            //- threejs 的控制器
            var controls = new THREE.OrbitControls( camera, renderer.domElement );
            controls.target = new THREE.Vector3(0,15,0);
            //- controls.maxPolarAngle = Math.PI / 2;
            //- controls.addEventListener( 'change', function() { renderer.render(scene, camera); } ); // add this only if there is no animation loop (requestAnimationFrame)
        }
        
        function animate() {
            requestAnimationFrame(animate);
            camera.lookAt(scene.position);
            if (mixer) {
                console.log('animate:', mixer);
                mixer.update(clock.getDelta())
            }
            stats.begin();
            render();
            stats.end();
        }

        //- 循环体-渲染
        function render() {
            renderer.render( scene, camera );
        }
        
        //- 调试框============================================================================
        function clearGui() {
            if (gui) gui.destroy();
            gui = new dat.GUI();
            gui.open();
        }
        function buildGui() {
            clearGui();
            addGui('cube pos x', cube.position.x, function(val) {
                cube.position.x = val;
            }, false, -500, 500);
            addGui('cube pos y', cube.position.y, function(val) {
                cube.position.y = val;
            }, false, -100, 100);
            addGui('cube pos z', cube.position.z, function(val) {
                cube.position.z = val;
            }, false, -500, 500);
            addGui('camera pos x', camera.position.x, function(val) {
                camera.position.x = val;
            }, false, -500, 500);
            addGui('camera pos y', camera.position.y, function(val) {
                camera.position.y = val;
            }, false, -100, 100);
            addGui('camera pos z', camera.position.z, function(val) {
                camera.position.z = val;
            }, false, -500, 500);
        }

        function addGui( name, value, callback, isColor, min, max ) {
            var node;
            var param = { color: '0xffffff' };
            param[ name ] = value;
            if ( isColor ) {
                node = gui.addColor( param, name ).onChange( function() {
                    callback( param[ name ] );
                } );
            } else if ( typeof value == 'object' ) {
                node = gui.add( param, name, value ).onChange( function() {
                    callback( param[ name ] );
                } );
            } else {
                node = gui.add( param, name, min, max ).onChange( function() {
                    callback( param[ name ] );
                } );
            }
            return node;
        }
        //- 调试框============================================================================

