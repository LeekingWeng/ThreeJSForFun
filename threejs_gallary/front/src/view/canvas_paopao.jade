extends threejslayout
block content
    style.
        body,html {
            padding: 0;
            margin: 0;
            width: 100%;
            height: 100%;
        }
        body {
            background: url('/threejs/static/img/canvas_QP0000_tian0084.png');
            background-size: cover;
        }
        .webgl-container,
        #webgl-container,
        #bubbles,
        #bubbles2,
        #bubbles3 {
            position: absolute;
            left: 0;
            top: 0;
        }
        .light {
            position: absolute;
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
            background-size: 100%;
            background-position: 50% 0;
            background: url('/threejs/static/img/canvas_GuangXian_00000.png');
        }
        .yuwang {
            position: absolute;
            width: 100%;
            height: 38%;
            left: 50%;
            transform: translate(-50%, 0);
            bottom: 0;
            margin-bottom: -100px;
            background: url(/threejs/static/img/canvas_yuwang.png);
            background-size: 100%;
            background-repeat: no-repeat;
            cursor: pointer;
            transition: .3s all;
        }
        .yuwang.active {
            bottom: 50%;
        }

    canvas#fishtank
    canvas#bubbles
    canvas#bubbles2
    canvas#bubbles3
    .light
    #webgl-container
    .yuwang

    script(src="/threejs/static/lib/threejs2/controls/OrbitControls.js")
    script(src="/threejs/static/lib/threejs2/GLTFLoader.js")

    //- 魚群
    script.
        ;(function() {
            /* ---------------- FISH "CLASS" START -------------- */
            var FOLLOW_DISTANCE = 100;

            var Fish = function() {
                // dx/yx is current speed, ox/oy is the previous one
                this.ox = this.dx = Math.random() - 0.5;
                this.oy = this.dy = Math.random() - 0.5;

                this.x = canvas.width * Math.random();
                this.y = canvas.height * Math.random();

                // A couple of helper functions, the names should describe their purpose
                Fish.prototype.angleToClosestFish = function(otherFish) {
                    otherFish = otherFish == null ? this.following : otherFish;
                    if (otherFish) {
                        return Math.atan2(otherFish.y - this.y, otherFish.x - this.x);
                    } else {
                        return Number.MAX_VALUE;
                    }
                }

                Fish.prototype.angleFromFishDirectionToClosestFish = function(otherFish) {
                    otherFish = otherFish == null ? this.following : otherFish;
                    if (otherFish) {
                        return Math.abs(deltaAngle(this.angle, this.angleToClosestFish(otherFish)));
                    } else {
                        return Number.MAX_VALUE;
                    }
                }

                Fish.prototype.angleDirectionDifference = function(otherFish) {
                    otherFish = otherFish == null ? this.following : otherFish;

                    if (otherFish) {
                        Math.abs(deltaAngle(this.angle, otherFish.angle));
                    } else {
                        return Number.MAX_VALUE;
                    }
                }

                // Update the fish "physics"
                Fish.prototype.calc = function() {
                    this.ox = this.dx;
                    this.oy = this.dy;
                    var maxSpeed = 1;

                    //Do I need to find another fish buddy?
                    if (this.following == null || py(this.x - this.following.x, this.y - this.following.y) > FOLLOW_DISTANCE) {
                        this.following = null;

                        //attract closer to other fish - find closest
                        var closestDistance = Number.MAX_VALUE;

                        for (var i = 0; i < fishes.length; i++) {
                            var fish = fishes[i];
                            if (fish != this) {
                                var distance = py(this.x - fish.x, this.y - fish.y);
                                // Is it closer, within the max distance and within the sector that the fish can see?
                                if (distance < closestDistance && fish.following != this && distance < FOLLOW_DISTANCE && this.angleFromFishDirectionToClosestFish(fish) < Math.PI * 0.25) {
                                    closestDistance = distance;
                                    this.following = fish;
                                }
                            }
                        }
                    }

                    // Fish is following another
                    if (this.following != null) {
                        // Go closer to other fish
                        this.followingDistance = py(this.x - this.following.x, this.y - this.following.y);
                        this.distanceFactor = 1 - this.followingDistance / FOLLOW_DISTANCE;

                        // If going head on, just break a little before following
                        if (this.angleDirectionDifference() > (Math.PI * 0.9) && // On colliding angle?
                            this.angleFromFishDirectionToClosestFish() < (Math.PI * 0.2)) { // In colliding sector?
                            this.dx += this.following.x * 0.1;
                            this.dy += this.following.y * 0.1;
                            if (keyDown) affinityLine(this.following, this, "yellow");
                        } else if (this.followingDistance > FOLLOW_DISTANCE * 0.3) { // Dont go closer if close
                            this.dx += Math.cos(this.angleToClosestFish()) * (0.05 * this.distanceFactor);
                            this.dy += Math.sin(this.angleToClosestFish()) * (0.05 * this.distanceFactor);
                            if (keyDown) affinityLine(this.following, this, "red");
                        }
                    }

                    // Go closer to center, crashing into the canvas walls is just silly!
                    if (this.x < canvas.width * .1 || this.x > canvas.width * .9 || this.y < canvas.height * .2 || this.y > canvas.height * .8) {
                        this.dx += (canvas.width / 2 - this.x) / 5000;
                        this.dy += (canvas.height / 2 - this.y) / 5000;
                    }

                    // Poor little fishies are2 scared of your cursor
                    if (py(this.x - cursor.x, this.y - cursor.y) < FOLLOW_DISTANCE * 0.75) {
                        this.dx -= (cursor.x - this.x) / 500;
                        this.dy -= (cursor.y - this.y) / 500;
                        maxSpeed = 4;
                        if (keyDown) affinityLine(cursor, this, "green");
                    }

                    // Calculate heading from new speed
                    this.angle = Math.atan2(this.dy, this.dx);

                    // Grab the speed from the vectors, and normalize it
                    var speed = Math.max(0.1, Math.min(maxSpeed, py(this.dx, this.dy)));

                    // Recreate speed vector from recombining angle of direction with normalized speed
                    this.dx = Math.cos(this.angle) * (speed + speedBoost);
                    this.dy = Math.sin(this.angle) * (speed + speedBoost);

                    // Fish like to move it, move it!
                    this.x += this.dx;
                    this.y += this.dy;
                }
            }
            /* ---------------------- FISH "CLASS" END -------------- */

            /* ---------------------- MAIN START -------------------- */
            var canvas = document.getElementById('fishtank');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            var context = canvas.getContext('2d');

            var fishes = [];


            var speedBoostCountdown = 100,
                speedBoost = 0,
                SPEED_BOOST = 2;
            var fishBitmap = new Image()
            fishBitmap.onload = function() {
                update();
            };
            fishBitmap.src = "/threejs/static/img/canvas_fish.png";

            //Draw Circle
            function draw(f) {
                var r = f.angle + Math.PI;

                context.translate(f.x, f.y);
                context.rotate(r);

                var w = 20;
                var acc = py(f.dx - f.ox, f.dy - f.oy) / 0.05;

                // If a fish does a "flip", make it less wide
                if (acc > 1) {
                    w = 10 + 10 / acc;
                }

                context.drawImage(fishBitmap, 0, 0, w, 6);
                context.rotate(-r);
                context.translate(-f.x, -f.y);
            }

            // Pythagoras shortcut
            function py(a, b) {
                return Math.sqrt(a * a + b * b);
            }

            //------------ USER INPUT START -------------
            var cursor = {
                x: 0,
                y: 0
            };
            var cursorDown = false,
                keyDown = false;

            //- document.onmousemove = function(e) {
            //-     cursor.x = e.pageX - (window.innerWidth / 2 - canvas.width / 2);
            //-     cursor.y = e.pageY - (window.innerHeight / 2 - canvas.height / 2);
            //- }

            //- document.onmouseout = function(e) { //Out of screen is not a valid pos
            //-     cursor.y = cursor.x = Number.MAX_VALUE;
            //- }

            //- document.onmousedown = function() {
            //-     activateSpeedBoost();
            //-     cursorDown = true;
            //- }
            //- document.onmouseup = function() {
            //-     cursorDown = false;
            //- }

            //- document.onkeydown = function() {
            //-     keyDown = true;
            //- }

            //- document.onkeyup = function() {
            //-         keyDown = false;
            //- }
            //------------ USER INPUT STOP -------------

            function deltaAngle(f, o) { //Find the shortest angle between two
                var r = f - o;
                return Math.atan2(Math.sin(r), Math.cos(r));
            }

            function affinityLine(f, o, c) { //Draw a line with pretty gradient
                var grad = context.createLinearGradient(f.x, f.y, o.x, o.y);
                grad.addColorStop(0, c);
                grad.addColorStop(1, "black");

                context.strokeStyle = grad;
                context.beginPath();
                context.moveTo(f.x, f.y);
                context.lineTo(o.x, o.y);
                context.stroke();
            }

            function activateSpeedBoost() {
                speedBoostCountdown = 400 + Math.round(400 * Math.random());
                speedBoost = SPEED_BOOST;
            }

            //Update and draw all of them
            function update() {
                    if (fishes.length < 100) {
                        fishes.push(new Fish());
                    }

                    if (!cursorDown) {
                        //clear the canvas
                        canvas.width = canvas.width; //Try commenting this line :-)

                        //Update and draw fish
                        for (var i = 0; i < fishes.length; i++) {
                            var fish = fishes[i];
                            fish.calc();
                            draw(fish);
                        }
                    }

                    speedBoostCountdown--;
                    if (speedBoostCountdown < 0) {
                        activateSpeedBoost();
                    }

                    if (speedBoost > 0) {
                        speedBoost -= SPEED_BOOST / 80; //Reduce speed bost fast!
                    } else {
                        speedBoost = 0;
                    }

                    requestAnimationFrame(update);
                }
            /* ---------------------- MAIN END ----------------------- */
        }())
    //- 氣泡
    script.
        ;(function(window) {
            function debounce(func, wait, immediate) {
                var timeout;
                return function() {
                    var context = this,
                        args = arguments;
                    var later = function() {
                        timeout = null;
                        if (!immediate) func.apply(context, args);
                    };
                    var callNow = immediate && !timeout;
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                    if (callNow) func.apply(context, args);
                }
            }

            var winsize = {
                width: window.innerWidth,
                height: window.innerHeight
            };

            var Bubbles = function(opt) {
                this.canvas = document.getElementById(opt.canvasID);
                this.ctx = this.canvas.getContext('2d');
                this.canvas.width = winsize.width;
                this.canvas.height = winsize.height;
                this.sourcex = opt.sourcex ? opt.sourcex : this.sourcex;
                this.sourcey = opt.sourcey ? opt.sourcey : this.sourcey;
                this.cntr = 0;
                this.circleArr = [];
                this.requestTd = undefined;

                var self = this;
                this.debounceResize = debounce(function() {
                    winsize = {
                        width: window.innerWidth,
                        height: window.innerHeight
                    };
                    self.canvas.height = winsize.height;
                    self.canvas.width = winsize.width;
                }, 10);

                window.addEventListener('resize', this.debounceResize);
            }
            Bubbles.prototype = {
                loop: function() {
                    //- this.requestTd = requestAnimationFrame(Bubbles.loop.bind(this));
                    this.requestTd = requestAnimationFrame(this.loop.bind(this));

                    this.update();
                    this.render();
                },
                update: function() {
                    if (this.cntr++ % 5 === 0) {
                        this.createCircle();
                    }
                    for (var circle in this.circleArr) {
                        circle = this.circleArr[circle];
                        circle.x = circle.startx + Math.cos(-circle.y / 80) * circle.swing;
                        circle.y -= circle.sy;
                        circle.s *= 1.0001;
                    }

                    while (this.circleArr.length > 2 &&
                        (this.circleArr[0].x + this.circleArr[0].s > winsize.width ||
                        this.circleArr[0].x + this.circleArr[0].s < 0 ||
                        this.circleArr[0].y + this.circleArr[0].s > winsize.height ||
                        this.circleArr[0].y + this.circleArr[0].s < 0)) {
                        this.circleArr.shift();
                        }
                },
                render: function() {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

                    for (var circle in this.circleArr) {
                        var current = this.circleArr[circle];
                        this.drawCircle(current.x, current.y, current.s);
                    }
                },
                createCircle: function() {
                    this.circleArr[this.circleArr.length] = {
                        x: this.sourcex,
                        y: this.sourcey,
                        sx: Math.random() * 4 - 2,
                        sy: Math.random() * 2 + 1,
                        startx: this.sourcex,
                        swing: Math.random() * 80 - 40,
                        s: Math.random() * winsize.height / 100
                    };
                },
                drawCircle: function(x, y, radius) {
                    this.ctx.fillStyle = 'rgba(255, 255, 255, .5)';
                    this.ctx.beginPath();
                    this.ctx.arc(x, y, radius, 0, Math.PI * 2, false);
                    this.ctx.fill();
                },
                start: function() {
                    if (!this.requestTd) {
                        //- document.onmousemove = this.getMouseCoordinates.bind(this);
                        this.loop();    
                    }
                },
                stop: function() {
                    if (this.requestTd) {
                        window.cancelAnimationFrame(this.requestTd);
                        this.requestId = undefined;
                        document.onmousemove = null;
                        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    }
                },
                getMouseCoordinates: function(ev) {
                    var ev = ev || window.event;
                    this.mousex = ev.pageX;
                    this.mousey = ev.pageY;
                }
            }

            var bubble1 = new Bubbles({
                canvasID: 'bubbles',
                sourcex: winsize.width / 3,
                sourcey: winsize.height - 30
            })
            var bubble2 = new Bubbles({
                canvasID: 'bubbles2',
                sourcex: winsize.width -30,
                sourcey: winsize.height / 2
            })
            var bubble3 = new Bubbles({
                canvasID: 'bubbles3',
                sourcex: 30,
                sourcey: winsize.height / 3
            })

            bubble1.start();
            bubble2.start();
            bubble3.start();
        }(window))


    //- 3d 魚
    script.
        ;(function(){
            var scene,
                camera,
                renderer,
                stats,
                gui
                ;
            var geometry,
                material,
                cube,
                line;
            
            var ambientLight;
            var loader;
            var tdObject;
            var mixer;
            var clock = new THREE.Clock();

            var $yuwang = $('.yuwang');

            window.tdObject = tdObject;
            init();
            //- buildGui();
            animate();

            function init() {
                var size = 500,
                    step = 50,
                    geometry,
                    i, j
                    ;
                
                //- Stats 
                //- stats = new Stats();
                //- document.body.appendChild(stats.dom);

                //- 创建场景
                scene = new THREE.Scene();
            
                //- 创建相机
                camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000000 );
                camera.position.z = 1500;
                camera.position.y = 0;
                camera.position.x = -1500;
                camera.lookAt(scene.position);

                //- 渲染
                renderer = new THREE.WebGLRenderer({antialias: false, alpha: true});
                //- renderer.setClearColor( 0xffffffff );
                renderer.setPixelRatio( window.devicePixelRatio );
                renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.shadowMap.enabled = true;
                renderer.shadowMap.type = THREE.PCFSoftShadowMap;
                renderer.domElement.className = 'webgl-container';
                var webglContainer = document.getElementById('webgl-container');
                webglContainer.appendChild(renderer.domElement);
                //- document.body.appendChild( renderer.domElement );

                //- 平面坐標系
                //- var CoSystem = new THREEex.CoSystem(500, 50, 0x000000);
                //- line = CoSystem.create();
                //- scene.add(line);

                //- 地面
                //- var groundMaterial = new THREE.MeshPhongMaterial({
                //-         color: 0x333333,
                //-         side: THREE.FrontSide,
                //-         shading: THREE.SmoothShading
                //-     });
                //- var ground = new THREE.Mesh( new THREE.PlaneBufferGeometry(5120, 5120), groundMaterial);
                //- ground.receiveShadow = true;
                //- ground.position.y = -200;
                //- ground.rotation.x = -Math.PI / 2;
                //- scene.add(ground);

                //- 立方体
                //- geometry = new THREE.BoxGeometry( 100, 100, 100 );
                //- material = new THREE.MeshLambertMaterial( { color: 0xff7700} );
                //- cube = new THREE.Mesh( geometry, material );
                //- scene.add( cube );

                //- gltf 3d模型导入
                loader = new THREE.GLTFLoader();
                loader.setCrossOrigin('https://ossgw.alicdn.com');
                var shanurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/51ff6704e19375613c3d4d3563348b7f.gltf';
                var caourl = 'https://ossgw.alicdn.com/tmall-c3/tmx/5e6c2c4bb052ef7562b52654c5635127.gltf'
                var bburl = 'https://ossgw.alicdn.com/tmall-c3/tmx/7554d11d494d79413fc665e9ef140aa6.gltf'
                var cowurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/2f17ddef947a7b6c702af69ff0e5b95f.gltf'
                var doorurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/203247ec660952407695fdfaf45812af.gltf';
                var fishurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/03807648cf70d99a7c1d3d634a2d4ea3.gltf';
                var demourl = 'https://ossgw.alicdn.com/tmall-c3/tmx/25ed65d4e9684567962230671512f731.gltf'
                var lanurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/1e1dfc4da8dfe2d7f14f23f0996c7feb.gltf'
                var daiurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/e68183de37ea4bed1787f6051b1d1f94.gltf'
                var douurl = 'https://ossgw.alicdn.com/tmall-c3/tmx/0ca2926cbf4bc664ff00b03c1a5d1f66.gltf'
                loader.load(fishurl, function(data) {
                    var scalePoint = 1;
                    var animation;

                    gltf = data;
                    tdObject = gltf.scene;
                    tdObject.position.set(0, 200, 0);                
                    tdObject.scale.set(scalePoint, scalePoint, scalePoint);
                    
                    var animations = gltf.animations;
                    if (animations && animations.length) {
                        mixer = new THREE.AnimationMixer(tdObject);
                        for (var i = 0; i < animations.length; i++) {
                            var animation = animations[i];
                            mixer.clipAction(animation).play();    
                        }    
                    }

                    scene.add( tdObject );
                })

                //- 环境灯
                ambientLight = new THREE.AmbientLight(0xffffff);
                scene.add(ambientLight);

                //- 直射灯
                //- var directionalLight = new THREE.DirectionalLight( 0xdddddd );
                //- directionalLight.position.set( 0, 0, 1 ).normalize();
                //- scene.add( directionalLight );

                //- 点灯
                //- var light = new THREE.PointLight(0xFFFFFF);
                //- light.position.set(50000, 50000, 50000);
                //- scene.add(light);

                //- 绑定窗口大小，自适应
                var threeexResize = new THREEex.WindowResize(renderer, camera);

                //- threejs 的控制器
                var controls = new THREE.OrbitControls( camera, renderer.domElement );
                controls.target = new THREE.Vector3(0,15,0);
            
                //- 點擊漁網
                $yuwang.on('click', function() {
                    $yuwang.toggleClass('active');
                })
            }
            
            function animate() {
                requestAnimationFrame(animate);
                camera.lookAt(scene.position);
                if (mixer) {
                    mixer.update(clock.getDelta())
                }
                //- stats.begin();
                render();
                //- stats.end();
            }

            //- 循环体-渲染
            function render() {
                renderer.render( scene, camera );
            }
        })(window)
