extends threejslayout

block content
    script(src="/threejs/static/lib/threejs/OrbitControls.js")
    script.
        var scene,
            camera,
            renderer,
            stats,
            gui
            ;
        var geometry,
            material,
            cube,
            line;
        
        var ambientLight;

        init();
        animate();

        function init() {
            var size = 500,
                step = 50,
                geometry,
                i, j
                ;
            var sphereG,
                sphereM,
                sphere;
            //- Stats 
            stats = new Stats();
            document.body.appendChild(stats.dom);

            //- 创建场景
            scene = new THREE.Scene();
        
            //- 创建相机
            camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 10000 );
            camera.position.z = 50;
            camera.position.y = 50;
            camera.position.x = 10;
            camera.lookAt(scene.position);

            //- 渲染
            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor( 0xf0f0f0 );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );
            document.body.appendChild( renderer.domElement );

            //- 平面坐標系
            var CoSystem = new THREEex.CoSystem(500, 50, 0x000000);
            line = CoSystem.create();
            scene.add(line);

            //- 立方体
            //- geometry = new THREE.BoxGeometry( 100, 100, 100 );
            //- material = new THREE.MeshLambertMaterial( { color: 0xff7700} );
            //- cube = new THREE.Mesh( geometry, material );
            //- scene.add( cube );

            //- sphere = createSphere(20, Math.PI * 2, Math.PI / 2, 0xff00ff, true);
            //- scene.add(sphere);
            
            createNSphere(100, scene);

            //- 环境灯
            ambientLight = new THREE.AmbientLight(0x404040);
            scene.add(ambientLight);

            //- 点灯
            var light = new THREE.PointLight(0xFFFF00);
            light.position.set(500, 500, 500);
            scene.add(light);

            //- 绑定窗口大小，自适应
            var threeexResize = new THREEex.WindowResize(renderer, camera);

            //- threejs 的控制器
            var controls = new THREE.OrbitControls( camera, renderer.domElement );
            //- controls.target = new THREE.Vector3(0,15,0);
            //- controls.maxPolarAngle = Math.PI / 2;
            //- controls.addEventListener( 'change', function() { renderer.render(scene, camera); } ); // add this only if there is no animation loop (requestAnimationFrame)
        }
        
        function animate() {
            requestAnimationFrame(animate);
            camera.lookAt(scene.position);
            stats.begin();
            render();
            stats.end();
        }

        //- 循环体-渲染
        function render() {
            renderer.render( scene, camera );
        }
        
        //- 调试框============================================================================
        function clearGui() {
            if (gui) gui.destroy();
            gui = new dat.GUI();
            gui.open();
        }
        function buildGui() {
            clearGui();
            addGui('cube pos x', cube.position.x, function(val) {
                cube.position.x = val;
            }, false, -500, 500);
            addGui('cube pos y', cube.position.y, function(val) {
                cube.position.y = val;
            }, false, -100, 100);
            addGui('cube pos z', cube.position.z, function(val) {
                cube.position.z = val;
            }, false, -500, 500);
            addGui('camera pos x', camera.position.x, function(val) {
                camera.position.x = val;
            }, false, -500, 500);
            addGui('camera pos y', camera.position.y, function(val) {
                camera.position.y = val;
            }, false, -100, 100);
            addGui('camera pos z', camera.position.z, function(val) {
                camera.position.z = val;
            }, false, -500, 500);
        }

        function addGui( name, value, callback, isColor, min, max ) {
            var node;
            var param = { color: '0xffffff' };
            param[ name ] = value;
            if ( isColor ) {
                node = gui.addColor( param, name ).onChange( function() {
                    callback( param[ name ] );
                } );
            } else if ( typeof value == 'object' ) {
                node = gui.add( param, name, value ).onChange( function() {
                    callback( param[ name ] );
                } );
            } else {
                node = gui.add( param, name, min, max ).onChange( function() {
                    callback( param[ name ] );
                } );
            }
            return node;
        }
        //- 调试框============================================================================

        //- 球体==============================================================================
        function createSphere(radius, hPI, vPI, color, wireframe) {
            var sphereG = new THREE.SphereGeometry(radius, 16, 16, 0, hPI, 0, vPI);
            var sphereM = new THREE.MeshBasicMaterial({color: color, wireframe: wireframe});
            var sphere = new THREE.Mesh(sphereG, sphereM);
            return sphere;
        }
        //- 球体==============================================================================
        
        //- 一堆随机球体======================================================================
        function createNSphere(num, scene) {
            var i = 0;
            var radius,
                color,
                posX,
                posY,
                posZ;
            var sphere;
            var sphereGroups = [];
            var group = new THREE.Group();
            scene.add(group);

            for (; i < num; i++) {
                radius = (Math.floor(Math.random() * 20) - 10) + 20;
                color = '0x' + Math.floor(Math.random() * 0xffffff);
                posX = (Math.floor(Math.random() * 2000) - 1000);
                posY = (Math.floor(Math.random() * 2000) - 1000);
                posZ = (Math.floor(Math.random() * 2000) - 1000);
                sphere = createSphere(radius, Math.PI * 2, Math.PI, 0xff00ff, false);
                //- sphere.translateOnAxis(posX, posY, posZ);
                sphere.position.x = posX;
                sphere.position.y = posY;
                sphere.position.z = posZ;
                sphereGroups.push(sphere);
                group.add(sphere);
            }
            window.sphere = sphereGroups[0];
            return sphereGroups;
        }
        //- 一堆随机球体======================================================================
        